platform :ios do
  # before_all do
  #   # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  #   # cocoapods
  #   # carthage
  #   create_keychain(
  #     name: 'name', # ENV["MATCH_KEYCHAIN_NAME"],
  #     password: 'password', # ENV["MATCH_KEYCHAIN_PASSWORD"],
  #     timeout: 1200
  #   )
  # end

  desc "Build App for development"
  lane :build do |options|
    xcodebuild(
      workspace: "./platforms/ios/Rocket.Chat.xcworkspace",
      scheme: "Rocket.Chat",
      configuration: "Debug",
      clean: options[:clean],
      build: true,
      destination: "generic/platform=iOS",
      build_settings: {
        "CODE_SIGNING_REQUIRED" => "NO",
        "CODE_SIGN_IDENTITY" => ""
      }
    )
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    # match(
    #   type: "appstore",
    #   git_url: "git@github.com:RocketChat/Rocket.Chat.ReactNative.FastLane.git"
    # ) # more information: https://codesigning.guide
    # pem()
    match(
      type: "appstore",
      git_url: "git@github.com:RocketChat/Rocket.Chat.Cordova.FastLane.git",
      verbose: true
    )
    # cordova(platform: 'ios')
    pem()
    gym(
      workspace: "./platforms/ios/Rocket.Chat.xcworkspace",
      scheme: "Rocket.Chat"
    ) # Build your app - more options available
    pilot

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  desc "Build App for release"
  lane :release do
    match(
      type: "appstore",
      git_url: "git@github.com:RocketChat/Rocket.Chat.Cordova.FastLane.git",
    ) # more information: https://codesigning.guide
    pem()
    gym(
      workspace: "./platforms/ios/Rocket.Chat.xcworkspace",
      scheme: "Rocket.Chat"
    ) # Build your app - more options available
  end

  # after_all do |lane|
  #   # This block is called, only if the executed lane was successful

  #   # slack(
  #   #   message: "Successfully deployed new App Update."
  #   # )
  #   delete_keychain(name: 'name') #ENV["MATCH_KEYCHAIN_NAME"])
  # end

  # error do |lane, exception|
  #   # slack(
  #   #   message: exception.message,
  #   #   success: false
  #   # )
  #   delete_keychain(name: 'name') #ENV["MATCH_KEYCHAIN_NAME"])
  # end

end